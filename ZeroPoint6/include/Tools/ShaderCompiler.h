//
// Created by phosg on 7/23/2023.
//

#ifndef ZP_SHADERCOMPILER_H
#define ZP_SHADERCOMPILER_H

#include "AssetCompiler.h"

namespace zp
{
        enum ShaderOutputReflectionResourceType : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_CBUFFER,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_TBUFFER,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_TEXTURE,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_SAMPLER,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_RWTYPED,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_STRUCTURED,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_RWSTRUCTURED,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_BYTEADDRESS,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_RWBYTEADDRESS,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_APPEND_STRUCTURED,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_COMSUMED_STRUCTURED,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_RWSTRUCTURED_WITH_COUNTER,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_RT_ACCELERATION_STRUCTURE,
        ZP_SHADER_OUTPUT_REFLECTION_RESOURCE_TYPE_FEEDBACK_TEXTURE,
    };

    enum ShaderOutputReflectionDimension : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_UNKNOWN,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_BUFFER,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE1D,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE1D_ARRAY,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE2D,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE2D_ARRAY,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE2DMS,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE2DMS_ARRAY,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURE3D,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURECUBE,
        ZP_SHADER_OUTPUT_REFLECTION_DIMENSION_TEXTURECUBE_ARRAY,
    };

    enum ShaderOutputReflectionReturnType : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_UNKNOWN,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_UNORM,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_SNORM,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_SINT,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_UINT,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_FLOAT,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_MIXED,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_DOUBLE,
        ZP_SHADER_OUTPUT_REFLECTION_RETURN_TYPE_CONTINUED,
    };

    enum ShaderOutputReflectionCBufferType : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_CBUFFER_TYPE_CBUFFER,
        ZP_SHADER_OUTPUT_REFLECTION_CBUFFER_TYPE_TBUFFER,
        ZP_SHADER_OUTPUT_REFLECTION_CBUFFER_TYPE_INTERFACE_POINTERS,
        ZP_SHADER_OUTPUT_REFLECTION_CBUFFER_TYPE_RESOURCE_BIND_INFO,
    };

    enum ShaderOutputReflectionComponentType : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_COMPONENT_TYPE_UNKNOWN,
        ZP_SHADER_OUTPUT_REFLECTION_COMPONENT_TYPE_UINT32,
        ZP_SHADER_OUTPUT_REFLECTION_COMPONENT_TYPE_INT32,
        ZP_SHADER_OUTPUT_REFLECTION_COMPONENT_TYPE_FLOAT32,
    };

    enum ShaderOutputReflectionInputOutputName : zp_uint8_t
    {
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_UNDEFINED,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_POSITION,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_CLIP_DISTANCE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_CULL_DISTANCE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_RENDER_TARGET_ARRAY_INDEX,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_VIEWPORT_ARRAY_INDEX,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_VERTEX_ID,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_PRIMITIVE_ID,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_INSTANCE_ID,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_IS_FRONT_FACE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_SAMPLE_INDEX,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_BARYCENTRICS,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_SHADING_RATE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_CULL_PRIMITIVE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_TARGET,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_DEPTH,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_COVERAGE,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_DEPTH_GREATER_EQUAL,
        ZP_SHADER_OUTPUT_REFLECTION_INPUT_OUTPUT_NAME_DEPTH_LESS_EQUAL,
    };

    enum ShaderOutputReflectionMask : zp_uint8_t
    {
        // @formatter:off
        ZP_SHADER_OUTPUT_REFLECTION_MASK_NONE = 0,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_X = 1 << 0,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_Y = 1 << 1,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_Z = 1 << 2,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_W = 1 << 3,

        ZP_SHADER_OUTPUT_REFLECTION_MASK_XY =   ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Y,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_XYZ =  ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_XYZW = ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,

        ZP_SHADER_OUTPUT_REFLECTION_MASK_XZ =  ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_XW =  ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_XYW = ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_XZW = ZP_SHADER_OUTPUT_REFLECTION_MASK_X | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,

        ZP_SHADER_OUTPUT_REFLECTION_MASK_YZ =  ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_YW =  ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,
        ZP_SHADER_OUTPUT_REFLECTION_MASK_YZW = ZP_SHADER_OUTPUT_REFLECTION_MASK_Y | ZP_SHADER_OUTPUT_REFLECTION_MASK_Z | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,

        ZP_SHADER_OUTPUT_REFLECTION_MASK_ZW =  ZP_SHADER_OUTPUT_REFLECTION_MASK_Z | ZP_SHADER_OUTPUT_REFLECTION_MASK_W,

        ZP_SHADER_OUTPUT_REFLECTION_MASK_ALL = 0xFF,
        // @formatter:on
    };

    struct ShaderOutputReflectionHeader
    {
        zp_uint8_t resourceCount;
        zp_uint8_t elementCount;
        zp_uint8_t inputCount;
        zp_uint8_t outputCount;
    };

    struct ShaderOutputReflectionResource
    {
        FixedString<32> name;

        ShaderOutputReflectionResourceType type;
        ShaderOutputReflectionDimension dimension;
        ShaderOutputReflectionReturnType returnType;
        zp_uint8_t bindIndex;

        zp_uint8_t bindCount;
        zp_uint8_t numSamples;
        zp_uint8_t space;
        zp_uint8_t flags;

        zp_uint32_t size;
    };

    struct ShaderOutputReflectionElement
    {
        FixedString<32> name;
        zp_uint32_t startOffset;
        zp_uint32_t size;
        zp_uint32_t resourceIndex;

        zp_uint8_t textureIndex;
        zp_uint8_t textureCount;
        zp_uint8_t samplerIndex;
        zp_uint8_t samplerCount;
    };

    struct ShaderOutputReflectionInputOutput
    {
        FixedString<32> name;
        ShaderOutputReflectionInputOutputName type;
        zp_uint8_t semanticIndex;
        zp_uint8_t registerIndex;
        ShaderOutputReflectionComponentType componentType;

        zp_uint8_t stream;
        ShaderOutputReflectionMask mask;
        ShaderOutputReflectionMask readWriteMask;
        zp_uint8_t flags;
    };
}

namespace zp::ShaderCompiler
{
    void ShaderCompilerExecuteJob( const JobHandle& parentJob, AssetCompilerTask* task );

    void ShaderCompilerExecute( AssetCompilerTask* task );

    Memory ShaderCompilerCreateTaskMemory( MemoryLabel memoryLabel, const String& inFile, const String& outFile, const CommandLine& cmdLine );

    void ShaderCompilerDestroyTaskMemory( MemoryLabel memoryLabel, Memory memory );
}

#endif //ZP_SHADERCOMPILER_H
